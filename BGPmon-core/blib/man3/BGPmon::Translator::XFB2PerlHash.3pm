.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Translator::XFB2PerlHash 3pm"
.TH BGPmon::Translator::XFB2PerlHash 3pm "2012-09-27" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Translator::XFB2PerlHash \- convert an XFB message into a Perl hash
.PP
This module converts an XML message to a nested hash data structure
and provides an interface to get a stringified representation of
the data structure as well as the ability to extract individual subtrees
from the nested structure.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use BGPmon::Translator::XFB2PerlHash;
.PP
.Vb 10
\& my $string = \*(Aq<BGP_MESSAGE length="00002243" version="0.4" 
\&xmlns="urn:ietf:params:xml:ns:xfb\-0.4" type_value="2" 
\&type="UPDATE"><BGPMON_SEQ id="0" seq_num="744909286"/><TIME 
\&timestamp="1336133702" datetime="2012\-05\-04T12:15:02Z" precision_time="0"/
\&><PEERING as_num_len="4"><SRC_ADDR><ADDRESS>2600:803::15</ADDRESS><AFI 
\&value="2">IPV6</AFI></SRC_ADDR><SRC_PORT>179</SRC_PORT><SRC_AS>701</
\&SRC_AS><DST_ADDR><ADDRESS>127.0.0.1</ADDRESS><AFI value="1">IPV4</AFI></
\&DST_ADDR><DST_PORT>179</DST_PORT><DST_AS>6447</DST_AS><BGPID>0.0.0.0</BGPID></
\&PEERING><ASCII_MSG length="110"><MARKER 
\&length="16">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</MARKER><UPDATE withdrawn_len="0" 
\&path_attr_len="87"><WITHDRAWN count="0"/><PATH_ATTRIBUTES count="5"><ATTRIBUTE 
\&length="1"><FLAGS transitive="TRUE"/><TYPE value="1">ORIGIN</TYPE><ORIGIN 
\&value="0">IGP</ORIGIN></ATTRIBUTE><ATTRIBUTE length="26"><FLAGS 
\&transitive="TRUE"/><TYPE value="2">AS_PATH</TYPE><AS_PATH><AS_SEG 
\&type="AS_SEQUENCE" length="6"><AS>701</AS><AS>12702</AS><AS>286</AS><AS>3549</
\&AS><AS>35994</AS><AS>35994</AS></AS_SEG></AS_PATH></ATTRIBUTE><ATTRIBUTE 
\&length="8"><FLAGS optional="TRUE" transitive="TRUE"/><TYPE 
\&value="7">AGGREGATOR</TYPE><AGGREGATOR><AS>0</AS><ADDR>192.8.8.2</ADDR></
\&AGGREGATOR></ATTRIBUTE><ATTRIBUTE length="8"><FLAGS optional="TRUE" 
\&transitive="TRUE"/><TYPE value="8">COMMUNITIES</
\&TYPE><COMMUNITIES><COMMUNITY><AS>701</AS><VALUE>333</VALUE></
\&COMMUNITY><COMMUNITY><AS>701</AS><VALUE>1020</VALUE></COMMUNITY></
\&COMMUNITIES></ATTRIBUTE><ATTRIBUTE length="28"><FLAGS optional="TRUE" 
\&extended="TRUE"/><TYPE value="14">MP_REACH_NLRI</TYPE><MP_REACH_NLRI><AFI 
\&value="2">IPV6</AFI><SAFI value="1">UNICAST</SAFI><NEXT_HOP_LEN>16</
\&NEXT_HOP_LEN><NEXT_HOP><ADDRESS>2600:803::15</ADDRESS></NEXT_HOP><NLRI 
\&count="1"><PREFIX label="DANN"><ADDRESS>2001:450:2030::/48</ADDRESS><AFI 
\&value="2">IPV6</AFI><SAFI value="1">UNICAST</SAFI></PREFIX></NLRI></
\&MP_REACH_NLRI></ATTRIBUTE></PATH_ATTRIBUTES><NLRI count="0"/></UPDATE></
\&ASCII_MSG><OCTET_MSG><OCTETS 
\&length="110">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF006E02000000574001010040021A02060
\&00002BD0000319E0000011E00000DDD00008C9A00008C9AC0070800008C9AADDEE9FEC0080802B
\&D014D02BD03FC900E001C00020110260008030000000000000000000000150030200104502030
\&</OCTETS></OCTET_MSG></BGP_MESSAGE>\*(Aq;
.Ve
.PP
my \f(CW%hash\fR = translate_msg($string);  #Converts and internally saves the message
.PP
print \fItoString()\fR;   #pretty\-prints the data
.PP
my \f(CW$result\fR = get_content('/BGP_MESSAGE/ASCII_MSG/MARKER/content');
.PP
print $$result;     #Would print '\s-1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\s0'
.PP
\&\f(CW$result\fR = get_content
('/BGP_MESSAGE/ASCII_MSG/UPDATE/PATH_ATTRIBUTES/ATTRIBUTE/MP_REACH_NLRI/PREFIX');
.PP
print \f(CW$res\fR\->{'\s-1ADDRESS\s0'}\->{'content'} foreach \f(CW$res\fR (@$result);
.PP
\&\f(CW$result\fR = get_content('/BGP_MESSAGE/PEERING');
.PP
print keys %$result;
.PP
\&\fIreset()\fR;
.SH "EXPORT"
.IX Header "EXPORT"
translate_msg
toString
get_content
reset
get_error_code
get_error_msg
get_error_message
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "translate_msg"
.IX Subsection "translate_msg"
Converts an \s-1XML\s0 message into a Perl hash structure while maintaining the 
structure of the message itself.
.PP
Input:      The \s-1XML\s0 string to be parsed
.PP
Output:     A perl hash structure that contains the converted string
            or an empty hash if there is no string provided or the
                \s-1XML\s0 parser fails
.SS "toString"
.IX Subsection "toString"
Returns a printable version of the most recent \s-1XML\s0 message that was parsed with
translate_msg.  If there is no such message, returns the empty string.
.SS "get_content"
.IX Subsection "get_content"
Returns a reference to an element or attribute of the most recent \s-1XML\s0 message
translated via translate_msg.
.PP
Input:      A slash-delimited string which gives the path through
            the message tree structure, i.e. 
            \*(L"/ROOT_TAG/NEXT_TAG/attribute_name\*(R"
            \s-1NOTE:\s0 To get the text contents of an element, specify \*(L"/content\*(R"
                as the final \*(L"node\*(R" in the target string.
.PP
Output:     A reference to the appropriate content if found.
            undef if no such information is found
.SS "reset"
.IX Subsection "reset"
Resets the module's state variables
.SS "get_error_code"
.IX Subsection "get_error_code"
Get the error code for some function
.PP
Input : the name of the function whose error code we should report
.PP
Output: the function's error code 
        or \s-1UNDEFINED_ARGUMENT\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function name
.SS "get_error_message"
.IX Subsection "get_error_message"
Get the error message for some function
.PP
Input : the name of the function whose error message we should report
.PP
Output: the function's error message
        or \s-1UNDEFINED_ARGUMENT\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function name
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Get the error message
.PP
This function is identical to get_error_message
.SH "ERROR CODES AND MESSAGES"
.IX Header "ERROR CODES AND MESSAGES"
The following error codes and messages are defined:
.PP
.Vb 2
\&    0:  No Error
\&        \*(AqNo Error. Life is good.\*(Aq
\&
\&    601:    There has been no XML message passed through translate_msg
\&        \*(AqNo XML message provided\*(Aq
\&
\&    602:    No argument was passed to a function expecting one
\&        \*(AqUndefined argument\*(Aq
\&
\&    603:    An invalid function name was passed to get_error_[code/message/msg]
\&        \*(AqInvalid Function Name Specified\*(Aq
\&
\&    604:    The XML parser failed
\&        \*(AqXML Parser Error\*(Aq
\&
\&    605:    There was no information found at the location passed to 
\&get_content
\&        \*(AqNo such element/attribute exists\*(Aq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Bartlett, \f(CW\*(C`<bartletj at cs.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
 \f(CW\*(C`bgpmon at netsec.colostate.edu\*(C'\fR, or through
the web interface at <http://bgpmon.netsec.colostate.edu>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc BGPmon::Translator::XFB2PerlHash
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
.Vb 8
\&    Permission is hereby granted, free of charge, to any person
\&    obtaining a copy of this software and associated documentation
\&    files (the "Software"), to deal in the Software without
\&    restriction, including without limitation the rights to use,
\&    copy, modify, merge, publish, distribute, sublicense, and/or
\&    sell copies of the Software, and to permit persons to whom
\&    the Software is furnished to do so, subject to the following
\&    conditions:
\&
\&    The above copyright notice and this permission notice shall be
\&    included in all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&    OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&    File: XFB2PerlHash.pm
\&
\&    Authors: Jason Bartlett, Kaustubh Gadkari, Dan Massey, Cathie Olschanowsky
\&    Date: 11 July 2012
.Ve
