.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Filter 3pm"
.TH BGPmon::Filter 3pm "2012-09-27" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Filter
.PP
This module provides information of if a BGP message matches a set of 
IPv4 or IPv6 prefixes, or if it matches a specific autonymous system number.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use BGPmon::Filter;
.PP
if(\fIBGPmon::Filter::init()\fR){
.PP
.Vb 1
\&        my $err_code = BGPmon::Filter::get_error_code(\*(Aqinit\*(Aq);
\&        
\&        my $err_msg = BGPmon::Filter::get_error_msg(\*(Aqinit\*(Aq);
\&        
\&        print "$err_code : $err_msg\en";
\&        
\&        exit 1;
\&}
\&if(BGPmon::Filter::parse_config_file(\*(Aqconfig_file.txt\*(Aq)){
\&        
\&        my $err_code = BGPmon::Filter::get_error_code(\*(Aqparse_config_file\*(Aq);
\&        
\&        my $err_msg = BGPmon::Filter::get_error_msg(\*(Aqparse_config_file\*(Aq);
\&        
\&        print "$err_code : $err_msg\en";
\&        
\&        exit 1;
\&}
\&my $xml4msg = \*(Aq<BGP_MESSAGE length="00001140" version="0.4" xmlns="urn:ietf:pa
.Ve
.PP
rams:xml:ns:xfb\-0.4\*(L" type_value=\*(R"2\*(L" type=\*(R"\s-1UPDATE\s0\*(L"><\s-1BGPMON_SEQ\s0 id=\*(R"127893688" se
.PP
q_num=\*(L"1541418969\*(R"/><\s-1TIME\s0 timestamp=\*(L"1346459370\*(R" datetime="2012\-09\-01T00:29:30Z
.PP
\&\*(L" precision_time=\*(R"0\*(L"/><\s-1PEERING\s0 as_num_len=\*(R"2"><\s-1SRC_ADDR\s0><\s-1ADDRESS\s0>187.16.217.154
.PP
</ADDRESS><\s-1AFI\s0 value=\*(L"1\*(R">IPV4</AFI></SRC_ADDR><\s-1SRC_PORT\s0>179</SRC_PORT><\s-1SRC_AS\s0>5
.PP
3175</SRC_AS><\s-1DST_ADDR\s0><\s-1ADDRESS\s0>200.160.6.217</ADDRESS><\s-1AFI\s0 value=\*(L"1\*(R">IPV4</AFI
.PP
></DST_ADDR><\s-1DST_PORT\s0>179</DST_PORT><\s-1DST_AS\s0>6447</DST_AS><\s-1BGPID\s0>0.0.0.0</BGPID>
.PP
</PEERING><\s-1ASCII_MSG\s0 length=\*(L"31\*(R"><\s-1MARKER\s0 length=\*(L"16\*(R">\s-1FFFFFFFFFFFFFFFFFFFFFFFFFF\s0
.PP
\&\s-1FFFFF\s0\fI/MARKER\fR<\s-1UPDATE\s0 withdrawn_len=\*(L"8\*(R" path_attr_len=\*(L"0\*(R"><\s-1WITHDRAWN\s0 count=\*(L"2\*(R"
.PP
><\s-1PREFIX\s0 label=\*(L"\s-1WITH\s0\*(R"><\s-1ADDRESS\s0>150.196.29.0/24</ADDRESS><\s-1AFI\s0 value=\*(L"1\*(R">\s-1IPV4\s0
.PP
</AFI><\s-1SAFI\s0 value=\*(L"1\*(R">\s-1UNICAST\s0 </SAFI></PREFIX><\s-1PREFIX\s0 label=\*(L"\s-1WITH\s0\*(R"><\s-1ADDRESS\s0>
.PP
205.94.224.0/20</ADDRESS><\s-1AFI\s0 value=\*(L"1\*(R">IPV4</AFI><\s-1SAFI\s0 value=\*(L"1\*(R">\s-1UNICAST\s0
.PP
</SAFI></PREFIX></WITHDRAWN><\s-1PATH_ATTRIBUTES\s0 count=\*(L"0\*(R"/><\s-1NLRI\s0 count=\*(L"0\*(R"/>
.PP
</UPDATE></ASCII_MSG><\s-1OCTET_MSG\s0><\s-1OCTETS\s0 length=\*(L"31\*(R">\s-1FFFFFFFFFFFFFFFFFFFFFFFFFFF\s0
.PP
FFFFF001F0200081896C41D14CD5EE00000</OCTETS></OCTET_MSG></BGP_MESSAGE>';
.PP
if(BGPmon::Filter::matches($xml4msg)){
.PP
.Vb 1
\&        print "Matches!\en";
\&        
\&        print BGPmon::Filter::toString(); #This will print out the parsed info
.Ve
.PP
}
.PP
else{
.PP
.Vb 1
\&        print "Does not match.\en";
.Ve
.PP
}
.SH "EXPORT"
.IX Header "EXPORT"
init parse_xml_msg parse_config_file toString reset get_error_msg get_error_code matches
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "init"
.IX Subsection "init"
Will initilialize the module an its state variables.  This only needs
to be called once.
.SS "reset"
.IX Subsection "reset"
Resets the module's state values.
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Will return the error message of the given function name.
.PP
Input:  A string that contains the function name where an error occured.
.PP
Output: The message which represents the error stored from that function.
.SS "get_error_code"
.IX Subsection "get_error_code"
Will return the error code of the given function name.
.PP
Input:  A string that represents the function name where an error occured.
.PP
Output: The code which represents the error stored from that function.
.SS "parse_config_file"
.IX Subsection "parse_config_file"
Will parse the wanted IPv4 and IPv6 prefixes from a configuration file as well
as any autonymous system numbers.  These will be stored until 
\&\fIBGPmon::Filter::reset()\fR is called.
.PP
Input: A string with the location of the configuration file to parse
.PP
Output: 0 if there is no error
        1 if an error occured
.SS "toString"
.IX Subsection "toString"
Will return a string that prints the most recently filtered prefixes and
autonymous system numbers in human-readable format.
.PP
E.g., 
IPv4 prefixes pulled from the message:
192.168.1.0/24
IPv6 prefixes pulled from the message:
(none)
\&\s-1AS\s0 numbers pulled from the message:
12345
.SS "matches"
.IX Subsection "matches"
Will check to see if the BGPmon message passed to it has maching prefix or \s-1AS\s0 
fields that were given earlier to the module.
.PP
Input:  A BGPmon message in \s-1XML\s0 format
.PP
Output: 1 if there was at least one matching filed.
        0 if no matches were found.
.SH "ERROR CODES AND MESSAGES"
.IX Header "ERROR CODES AND MESSAGES"
The following error codes and messages are defined:
.PP
.Vb 10
\&        0:   There isn\*(Aqt an error.
\&             \*(AqNo Error. Relax with some tea.\*(Aq
\&        520: The name of the configuration file given doesn\*(Aqt exists or
\&             cannot be opened.
\&             \*(AqInvalid filename given for config file.\*(Aq
\&        530: An IPv4 address given in the configuration file has on octet 
\&             out of range, is syntactly incorrect, or is otherwise invalid.
\&             \*(AqInvalid IPv4 given in config file.\*(Aq
\&        531: An IPv6 address given in teh configuration file has a value
\&             out of range, is syntactly incorrect, or is otherwise invalid.
\&             \*(AqInvalid IPv6 given in config file.\*(Aq
\&        532: An Autonymous System number given in the configuration file
\&             is out of range or otherwise invalid.
\&             \*(AqInvalid AS given in config file.\*(Aq
\&        533: An unknown configuration was found in the configuration file.
\&             \*(AqInvalid line in config file.\*(Aq
\&        540: A message was not passed to the BGPmon::Filter::matches method.
\&             \*(AqNo XML message was given.\*(Aq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
M. Lawrence Weikum \f(CW\*(C`<mweikum at rams.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requeues to 
 \f(CW\*(C`bgpmon at netsec.colostate.edu\*(C'\fR or through the web interface
 at <http://bgpmon.netsec.colostate.edu>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation on this module with the perldoc command.
.PP
.Vb 1
\&        perldoc BGPmon::Filter
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the \*(L"Software\*(R"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following
conditions:
.PP
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
.PP
\&\s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R", \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0,
\&\s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1THE\s0 \s-1WARRANTIES\s0
\&\s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1AND\s0
\&\s-1NONINFRINGEMENT\s0. \s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1OR\s0 \s-1COPYRIGHT\s0
\&\s-1HOLDERS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1CLAIM\s0, \s-1DAMAGES\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1LIABILITY\s0,
\&\s-1WHETHER\s0 \s-1IN\s0 \s-1AN\s0 \s-1ACTION\s0 \s-1OF\s0 \s-1CONTRACT\s0, \s-1TORT\s0 \s-1OR\s0 \s-1OTHERWISE\s0, \s-1ARISING\s0
\&\s-1FROM\s0, \s-1OUT\s0 \s-1OF\s0 \s-1OR\s0 \s-1IN\s0 \s-1CONNECTION\s0 \s-1WITH\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1OR\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0
\&\s-1OTHER\s0 \s-1DEALINGS\s0 \s-1IN\s0 \s-1THE\s0 \s-1SOFTWARE\s0.\e
.PP
File: Filter.pm
Authors: M. Lawrence Weikum
Date: 5 September 2012
